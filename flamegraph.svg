<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="21898"><g><title>ntdll`RtlpGetSystemDefaultUILanguage (3 samples, 0.01%)</title><rect x="0.0137%" y="309" width="0.0137%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="3"/><text x="0.2637%" y="319.50"></text></g><g><title>ntdll`RtlIsCriticalSectionLockedByThread (3 samples, 0.01%)</title><rect x="0.0137%" y="293" width="0.0137%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="3"/><text x="0.2637%" y="303.50"></text></g><g><title>ntdll`RtlLocaleNameToLcid (3 samples, 0.01%)</title><rect x="0.0137%" y="277" width="0.0137%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="3"/><text x="0.2637%" y="287.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (3 samples, 0.01%)</title><rect x="0.0137%" y="261" width="0.0137%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="3"/><text x="0.2637%" y="271.50"></text></g><g><title>KERNELBASE`PeekConsoleInputW (3 samples, 0.01%)</title><rect x="0.0320%" y="213" width="0.0137%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="3"/><text x="0.2820%" y="223.50"></text></g><g><title>ntdll`LdrLoadDll (9 samples, 0.04%)</title><rect x="0.0091%" y="357" width="0.0411%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="9"/><text x="0.2591%" y="367.50"></text></g><g><title>ntdll`RtlDosSearchPath_Ustr (9 samples, 0.04%)</title><rect x="0.0091%" y="341" width="0.0411%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="9"/><text x="0.2591%" y="351.50"></text></g><g><title>ntdll`RtlLeaveCriticalSection (9 samples, 0.04%)</title><rect x="0.0091%" y="325" width="0.0411%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="9"/><text x="0.2591%" y="335.50"></text></g><g><title>ntdll`RtlpQueryDefaultUILanguage (5 samples, 0.02%)</title><rect x="0.0274%" y="309" width="0.0228%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="5"/><text x="0.2774%" y="319.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (5 samples, 0.02%)</title><rect x="0.0274%" y="293" width="0.0228%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="5"/><text x="0.2774%" y="303.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (5 samples, 0.02%)</title><rect x="0.0274%" y="277" width="0.0228%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="5"/><text x="0.2774%" y="287.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (5 samples, 0.02%)</title><rect x="0.0274%" y="261" width="0.0228%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="5"/><text x="0.2774%" y="271.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (5 samples, 0.02%)</title><rect x="0.0274%" y="245" width="0.0228%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="5"/><text x="0.2774%" y="255.50"></text></g><g><title>KERNELBASE`PeekConsoleInputW (5 samples, 0.02%)</title><rect x="0.0274%" y="229" width="0.0228%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="5"/><text x="0.2774%" y="239.50"></text></g><g><title>ntdll`LdrInitializeThunk (19 samples, 0.09%)</title><rect x="0.0000%" y="405" width="0.0868%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="19"/><text x="0.2500%" y="415.50"></text></g><g><title>ntdll`RtlNotifyFeatureUsage (19 samples, 0.09%)</title><rect x="0.0000%" y="389" width="0.0868%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="19"/><text x="0.2500%" y="399.50"></text></g><g><title>ntdll`LdrInitShimEngineDynamic (19 samples, 0.09%)</title><rect x="0.0000%" y="373" width="0.0868%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="19"/><text x="0.2500%" y="383.50"></text></g><g><title>ntdll`LdrInitializeThunk (20 samples, 0.09%)</title><rect x="0.0000%" y="421" width="0.0913%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="20"/><text x="0.2500%" y="431.50"></text></g><g><title>ntdll`EtwNotificationRegister (4 samples, 0.02%)</title><rect x="0.0913%" y="389" width="0.0183%" height="15" fill="rgb(221,200,47)" fg:x="20" fg:w="4"/><text x="0.3413%" y="399.50"></text></g><g><title>VCRUNTIME140`memcpy (253 samples, 1.16%)</title><rect x="4.5758%" y="229" width="1.1554%" height="15" fill="rgb(226,26,5)" fg:x="1002" fg:w="253"/><text x="4.8258%" y="239.50"></text></g><g><title>ntdll`RtlCopyMemory (194 samples, 0.89%)</title><rect x="5.7448%" y="101" width="0.8859%" height="15" fill="rgb(249,33,26)" fg:x="1258" fg:w="194"/><text x="5.9948%" y="111.50"></text></g><g><title>osmium`alloc::raw_vec::RawVec&lt;osmium::tokenizer::FileToken,alloc::alloc::Global&gt;::reserve_for_push (203 samples, 0.93%)</title><rect x="5.7311%" y="229" width="0.9270%" height="15" fill="rgb(235,183,28)" fg:x="1255" fg:w="203"/><text x="5.9811%" y="239.50"></text></g><g><title>osmium`alloc::raw_vec::RawVec&lt;osmium::tokenizer::FileToken,alloc::alloc::Global&gt;::grow_amortized (203 samples, 0.93%)</title><rect x="5.7311%" y="213" width="0.9270%" height="15" fill="rgb(221,5,38)" fg:x="1255" fg:w="203"/><text x="5.9811%" y="223.50"></text></g><g><title>osmium`alloc::raw_vec::finish_grow (203 samples, 0.93%)</title><rect x="5.7311%" y="197" width="0.9270%" height="15" fill="rgb(247,18,42)" fg:x="1255" fg:w="203"/><text x="5.9811%" y="207.50"></text></g><g><title>osmium`alloc::alloc::impl$1::grow (201 samples, 0.92%)</title><rect x="5.7403%" y="181" width="0.9179%" height="15" fill="rgb(241,131,45)" fg:x="1257" fg:w="201"/><text x="5.9903%" y="191.50"></text></g><g><title>osmium`alloc::alloc::Global::grow_impl (201 samples, 0.92%)</title><rect x="5.7403%" y="165" width="0.9179%" height="15" fill="rgb(249,31,29)" fg:x="1257" fg:w="201"/><text x="5.9903%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (201 samples, 0.92%)</title><rect x="5.7403%" y="149" width="0.9179%" height="15" fill="rgb(225,111,53)" fg:x="1257" fg:w="201"/><text x="5.9903%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (201 samples, 0.92%)</title><rect x="5.7403%" y="133" width="0.9179%" height="15" fill="rgb(238,160,17)" fg:x="1257" fg:w="201"/><text x="5.9903%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (201 samples, 0.92%)</title><rect x="5.7403%" y="117" width="0.9179%" height="15" fill="rgb(214,148,48)" fg:x="1257" fg:w="201"/><text x="5.9903%" y="127.50"></text></g><g><title>ntdll`RtlFreeHeap (6 samples, 0.03%)</title><rect x="6.6307%" y="101" width="0.0274%" height="15" fill="rgb(232,36,49)" fg:x="1452" fg:w="6"/><text x="6.8807%" y="111.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (6 samples, 0.03%)</title><rect x="6.6307%" y="85" width="0.0274%" height="15" fill="rgb(209,103,24)" fg:x="1452" fg:w="6"/><text x="6.8807%" y="95.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (6 samples, 0.03%)</title><rect x="6.6307%" y="69" width="0.0274%" height="15" fill="rgb(229,88,8)" fg:x="1452" fg:w="6"/><text x="6.8807%" y="79.50"></text></g><g><title>ntdll`TpReleaseWork (6 samples, 0.03%)</title><rect x="6.6307%" y="53" width="0.0274%" height="15" fill="rgb(213,181,19)" fg:x="1452" fg:w="6"/><text x="6.8807%" y="63.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (6 samples, 0.03%)</title><rect x="6.6307%" y="37" width="0.0274%" height="15" fill="rgb(254,191,54)" fg:x="1452" fg:w="6"/><text x="6.8807%" y="47.50"></text></g><g><title>osmium`alloc::vec::Vec&lt;osmium::tokenizer::FileToken,alloc::alloc::Global&gt;::push (503 samples, 2.30%)</title><rect x="4.3657%" y="245" width="2.2970%" height="15" fill="rgb(241,83,37)" fg:x="956" fg:w="503"/><text x="4.6157%" y="255.50">o..</text></g><g><title>osmium`alloc::vec::impl$9::deref (36 samples, 0.16%)</title><rect x="6.6627%" y="245" width="0.1644%" height="15" fill="rgb(233,36,39)" fg:x="1459" fg:w="36"/><text x="6.9127%" y="255.50"></text></g><g><title>VCRUNTIME140`memcpy (32 samples, 0.15%)</title><rect x="6.8499%" y="229" width="0.1461%" height="15" fill="rgb(226,3,54)" fg:x="1500" fg:w="32"/><text x="7.0999%" y="239.50"></text></g><g><title>osmium`core::slice::cmp::impl$0::eq (44 samples, 0.20%)</title><rect x="8.3204%" y="181" width="0.2009%" height="15" fill="rgb(245,192,40)" fg:x="1822" fg:w="44"/><text x="8.5704%" y="191.50"></text></g><g><title>osmium`core::slice::cmp::impl$5::equal (40 samples, 0.18%)</title><rect x="8.3387%" y="165" width="0.1827%" height="15" fill="rgb(238,167,29)" fg:x="1826" fg:w="40"/><text x="8.5887%" y="175.50"></text></g><g><title>VCRUNTIME140`memcmp (4 samples, 0.02%)</title><rect x="8.5031%" y="149" width="0.0183%" height="15" fill="rgb(232,182,51)" fg:x="1862" fg:w="4"/><text x="8.7531%" y="159.50"></text></g><g><title>osmium`core::slice::index::impl$4::get (148 samples, 0.68%)</title><rect x="8.5213%" y="181" width="0.6759%" height="15" fill="rgb(231,60,39)" fg:x="1866" fg:w="148"/><text x="8.7713%" y="191.50"></text></g><g><title>osmium`core::slice::index::impl$4::get_unchecked (59 samples, 0.27%)</title><rect x="8.9278%" y="165" width="0.2694%" height="15" fill="rgb(208,69,12)" fg:x="1955" fg:w="59"/><text x="9.1778%" y="175.50"></text></g><g><title>osmium`core::slice::index::impl$4::index (63 samples, 0.29%)</title><rect x="9.1972%" y="181" width="0.2877%" height="15" fill="rgb(235,93,37)" fg:x="2014" fg:w="63"/><text x="9.4472%" y="191.50"></text></g><g><title>osmium`core::slice::index::impl$4::get_unchecked (45 samples, 0.21%)</title><rect x="9.2794%" y="165" width="0.2055%" height="15" fill="rgb(213,116,39)" fg:x="2032" fg:w="45"/><text x="9.5294%" y="175.50"></text></g><g><title>osmium`core::slice::memchr::memchr_aligned (9 samples, 0.04%)</title><rect x="9.6356%" y="165" width="0.0411%" height="15" fill="rgb(222,207,29)" fg:x="2110" fg:w="9"/><text x="9.8856%" y="175.50"></text></g><g><title>osmium`core::str::pattern::impl$0::next_match (619 samples, 2.83%)</title><rect x="7.3477%" y="197" width="2.8267%" height="15" fill="rgb(206,96,30)" fg:x="1609" fg:w="619"/><text x="7.5977%" y="207.50">os..</text></g><g><title>osmium`core::slice::memchr::memchr (151 samples, 0.69%)</title><rect x="9.4849%" y="181" width="0.6896%" height="15" fill="rgb(218,138,4)" fg:x="2077" fg:w="151"/><text x="9.7349%" y="191.50"></text></g><g><title>osmium`core::slice::memchr::memchr_naive (109 samples, 0.50%)</title><rect x="9.6767%" y="165" width="0.4978%" height="15" fill="rgb(250,191,14)" fg:x="2119" fg:w="109"/><text x="9.9267%" y="175.50"></text></g><g><title>osmium`core::str::pattern::impl$0::haystack (16 samples, 0.07%)</title><rect x="10.3525%" y="165" width="0.0731%" height="15" fill="rgb(239,60,40)" fg:x="2267" fg:w="16"/><text x="10.6025%" y="175.50"></text></g><g><title>osmium`core::iter::traits::iterator::Iterator::fold&lt;core::str::iter::Matches&lt;char&gt;,usize,core::iter::traits::iterator::Iterator::count::closure_env$0&lt;core::str::iter::Matches (794 samples, 3.63%)</title><rect x="6.9961%" y="229" width="3.6259%" height="15" fill="rgb(206,27,48)" fg:x="1532" fg:w="794"/><text x="7.2461%" y="239.50">osmi..</text></g><g><title>osmium`core::str::iter::impl$101::next (724 samples, 3.31%)</title><rect x="7.3157%" y="213" width="3.3062%" height="15" fill="rgb(225,35,8)" fg:x="1602" fg:w="724"/><text x="7.5657%" y="223.50">osm..</text></g><g><title>osmium`enum2$&lt;core::option::Option&lt;tuple$&lt;usize,usize&gt; &gt; &gt;::map&lt;tuple$&lt;usize,usize&gt;,ref$&lt;str$&gt;,core::str::iter::impl$29::next::closure_env$0 (98 samples, 0.45%)</title><rect x="10.1744%" y="197" width="0.4475%" height="15" fill="rgb(250,213,24)" fg:x="2228" fg:w="98"/><text x="10.4244%" y="207.50"></text></g><g><title>osmium`core::str::iter::impl$29::next::closure$0 (75 samples, 0.34%)</title><rect x="10.2795%" y="181" width="0.3425%" height="15" fill="rgb(247,123,22)" fg:x="2251" fg:w="75"/><text x="10.5295%" y="191.50"></text></g><g><title>osmium`core::str::traits::impl$7::get_unchecked (43 samples, 0.20%)</title><rect x="10.4256%" y="165" width="0.1964%" height="15" fill="rgb(231,138,38)" fg:x="2283" fg:w="43"/><text x="10.6756%" y="175.50"></text></g><g><title>osmium`core::iter::traits::iterator::Iterator::count&lt;core::str::iter::Matches (832 samples, 3.80%)</title><rect x="6.8271%" y="245" width="3.7994%" height="15" fill="rgb(231,145,46)" fg:x="1495" fg:w="832"/><text x="7.0771%" y="255.50">osmi..</text></g><g><title>osmium`core::result::impl$26::branch&lt;enum2$&lt;osmium::tokenizer::Token&gt;,enum2$ (67 samples, 0.31%)</title><rect x="10.6265%" y="245" width="0.3060%" height="15" fill="rgb(251,118,11)" fg:x="2327" fg:w="67"/><text x="10.8765%" y="255.50"></text></g><g><title>osmium`core::slice::impl$0::last (22 samples, 0.10%)</title><rect x="10.9325%" y="245" width="0.1005%" height="15" fill="rgb(217,147,25)" fg:x="2394" fg:w="22"/><text x="11.1825%" y="255.50"></text></g><g><title>osmium`core::slice::memchr::memchr_aligned (34 samples, 0.16%)</title><rect x="11.8276%" y="197" width="0.1553%" height="15" fill="rgb(247,81,37)" fg:x="2590" fg:w="34"/><text x="12.0776%" y="207.50"></text></g><g><title>osmium`core::str::impl$0::contains (390 samples, 1.78%)</title><rect x="11.0330%" y="245" width="1.7810%" height="15" fill="rgb(209,12,38)" fg:x="2416" fg:w="390"/><text x="11.2830%" y="255.50">o..</text></g><g><title>osmium`core::str::pattern::impl$3::is_contained_in (377 samples, 1.72%)</title><rect x="11.0923%" y="229" width="1.7216%" height="15" fill="rgb(227,1,9)" fg:x="2429" fg:w="377"/><text x="11.3423%" y="239.50"></text></g><g><title>osmium`core::slice::memchr::memchr (274 samples, 1.25%)</title><rect x="11.5627%" y="213" width="1.2513%" height="15" fill="rgb(248,47,43)" fg:x="2532" fg:w="274"/><text x="11.8127%" y="223.50"></text></g><g><title>osmium`core::slice::memchr::memchr_naive (182 samples, 0.83%)</title><rect x="11.9828%" y="197" width="0.8311%" height="15" fill="rgb(221,10,30)" fg:x="2624" fg:w="182"/><text x="12.2328%" y="207.50"></text></g><g><title>osmium`core::slice::cmp::impl$0::eq (45 samples, 0.21%)</title><rect x="13.2432%" y="213" width="0.2055%" height="15" fill="rgb(210,229,1)" fg:x="2900" fg:w="45"/><text x="13.4932%" y="223.50"></text></g><g><title>osmium`core::slice::cmp::impl$5::equal (40 samples, 0.18%)</title><rect x="13.2661%" y="197" width="0.1827%" height="15" fill="rgb(222,148,37)" fg:x="2905" fg:w="40"/><text x="13.5161%" y="207.50"></text></g><g><title>osmium`core::slice::index::impl$4::get (76 samples, 0.35%)</title><rect x="13.4487%" y="213" width="0.3471%" height="15" fill="rgb(234,67,33)" fg:x="2945" fg:w="76"/><text x="13.6987%" y="223.50"></text></g><g><title>osmium`core::slice::index::impl$4::get_unchecked (28 samples, 0.13%)</title><rect x="13.6679%" y="197" width="0.1279%" height="15" fill="rgb(247,98,35)" fg:x="2993" fg:w="28"/><text x="13.9179%" y="207.50"></text></g><g><title>osmium`core::slice::index::impl$4::index (41 samples, 0.19%)</title><rect x="13.7958%" y="213" width="0.1872%" height="15" fill="rgb(247,138,52)" fg:x="3021" fg:w="41"/><text x="14.0458%" y="223.50"></text></g><g><title>osmium`core::slice::index::impl$4::get_unchecked (27 samples, 0.12%)</title><rect x="13.8597%" y="197" width="0.1233%" height="15" fill="rgb(213,79,30)" fg:x="3035" fg:w="27"/><text x="14.1097%" y="207.50"></text></g><g><title>osmium`core::slice::memchr::memchr_aligned (11 samples, 0.05%)</title><rect x="14.0561%" y="197" width="0.0502%" height="15" fill="rgb(246,177,23)" fg:x="3078" fg:w="11"/><text x="14.3061%" y="207.50"></text></g><g><title>osmium`core::str::pattern::impl$0::next_match (335 samples, 1.53%)</title><rect x="12.8596%" y="229" width="1.5298%" height="15" fill="rgb(230,62,27)" fg:x="2816" fg:w="335"/><text x="13.1096%" y="239.50"></text></g><g><title>osmium`core::slice::memchr::memchr (89 samples, 0.41%)</title><rect x="13.9830%" y="213" width="0.4064%" height="15" fill="rgb(216,154,8)" fg:x="3062" fg:w="89"/><text x="14.2330%" y="223.50"></text></g><g><title>osmium`core::slice::memchr::memchr_naive (62 samples, 0.28%)</title><rect x="14.1063%" y="197" width="0.2831%" height="15" fill="rgb(244,35,45)" fg:x="3089" fg:w="62"/><text x="14.3563%" y="207.50"></text></g><g><title>VCRUNTIME140`memset (3 samples, 0.01%)</title><rect x="14.6041%" y="213" width="0.0137%" height="15" fill="rgb(251,115,12)" fg:x="3198" fg:w="3"/><text x="14.8541%" y="223.50"></text></g><g><title>osmium`core::char::methods::encode_utf8_raw (80 samples, 0.37%)</title><rect x="14.6178%" y="213" width="0.3653%" height="15" fill="rgb(240,54,50)" fg:x="3201" fg:w="80"/><text x="14.8678%" y="223.50"></text></g><g><title>osmium`core::slice::index::impl$4::index_mut (43 samples, 0.20%)</title><rect x="14.7867%" y="197" width="0.1964%" height="15" fill="rgb(233,84,52)" fg:x="3238" fg:w="43"/><text x="15.0367%" y="207.50"></text></g><g><title>osmium`core::slice::index::impl$4::get_unchecked_mut (31 samples, 0.14%)</title><rect x="14.8415%" y="181" width="0.1416%" height="15" fill="rgb(207,117,47)" fg:x="3250" fg:w="31"/><text x="15.0915%" y="191.50"></text></g><g><title>osmium`core::str::pattern::impl$3::into_searcher (133 samples, 0.61%)</title><rect x="14.3894%" y="229" width="0.6074%" height="15" fill="rgb(249,43,39)" fg:x="3151" fg:w="133"/><text x="14.6394%" y="239.50"></text></g><g><title>osmium`memset (3 samples, 0.01%)</title><rect x="14.9831%" y="213" width="0.0137%" height="15" fill="rgb(209,38,44)" fg:x="3281" fg:w="3"/><text x="15.2331%" y="223.50"></text></g><g><title>osmium`core::str::impl$0::find (499 samples, 2.28%)</title><rect x="12.8140%" y="245" width="2.2787%" height="15" fill="rgb(236,212,23)" fg:x="2806" fg:w="499"/><text x="13.0640%" y="255.50">o..</text></g><g><title>osmium`enum2$&lt;core::option::Option&lt;tuple$&lt;usize,usize&gt; &gt; &gt;::map&lt;tuple$&lt;usize,usize&gt;,usize,core::str::impl$0::find::closure_env$0 (21 samples, 0.10%)</title><rect x="14.9968%" y="229" width="0.0959%" height="15" fill="rgb(242,79,21)" fg:x="3284" fg:w="21"/><text x="15.2468%" y="239.50"></text></g><g><title>osmium`core::str::impl$0::len (51 samples, 0.23%)</title><rect x="15.0927%" y="245" width="0.2329%" height="15" fill="rgb(211,96,35)" fg:x="3305" fg:w="51"/><text x="15.3427%" y="255.50"></text></g><g><title>VCRUNTIME140`memcpy (67 samples, 0.31%)</title><rect x="15.3484%" y="229" width="0.3060%" height="15" fill="rgb(253,215,40)" fg:x="3361" fg:w="67"/><text x="15.5984%" y="239.50"></text></g><g><title>VCRUNTIME140`memset (3 samples, 0.01%)</title><rect x="15.8097%" y="213" width="0.0137%" height="15" fill="rgb(211,81,21)" fg:x="3462" fg:w="3"/><text x="16.0597%" y="223.50"></text></g><g><title>osmium`core::char::methods::len_utf8 (9 samples, 0.04%)</title><rect x="15.9604%" y="197" width="0.0411%" height="15" fill="rgb(208,190,38)" fg:x="3495" fg:w="9"/><text x="16.2104%" y="207.50"></text></g><g><title>osmium`core::char::methods::encode_utf8_raw (71 samples, 0.32%)</title><rect x="15.8234%" y="213" width="0.3242%" height="15" fill="rgb(235,213,38)" fg:x="3465" fg:w="71"/><text x="16.0734%" y="223.50"></text></g><g><title>osmium`core::slice::index::impl$4::index_mut (32 samples, 0.15%)</title><rect x="16.0015%" y="197" width="0.1461%" height="15" fill="rgb(237,122,38)" fg:x="3504" fg:w="32"/><text x="16.2515%" y="207.50"></text></g><g><title>osmium`core::slice::index::impl$4::get_unchecked_mut (20 samples, 0.09%)</title><rect x="16.0563%" y="181" width="0.0913%" height="15" fill="rgb(244,218,35)" fg:x="3516" fg:w="20"/><text x="16.3063%" y="191.50"></text></g><g><title>osmium`core::str::pattern::impl$3::into_searcher (111 samples, 0.51%)</title><rect x="15.6544%" y="229" width="0.5069%" height="15" fill="rgb(240,68,47)" fg:x="3428" fg:w="111"/><text x="15.9044%" y="239.50"></text></g><g><title>osmium`memset (3 samples, 0.01%)</title><rect x="16.1476%" y="213" width="0.0137%" height="15" fill="rgb(210,16,53)" fg:x="3536" fg:w="3"/><text x="16.3976%" y="223.50"></text></g><g><title>osmium`core::str::impl$0::matches (186 samples, 0.85%)</title><rect x="15.3256%" y="245" width="0.8494%" height="15" fill="rgb(235,124,12)" fg:x="3356" fg:w="186"/><text x="15.5756%" y="255.50"></text></g><g><title>osmium`memcpy (3 samples, 0.01%)</title><rect x="16.1613%" y="229" width="0.0137%" height="15" fill="rgb(224,169,11)" fg:x="3539" fg:w="3"/><text x="16.4113%" y="239.50"></text></g><g><title>VCRUNTIME140`memcmp (10 samples, 0.05%)</title><rect x="18.4218%" y="181" width="0.0457%" height="15" fill="rgb(250,166,2)" fg:x="4034" fg:w="10"/><text x="18.6718%" y="191.50"></text></g><g><title>osmium`core::slice::cmp::impl$0::eq (123 samples, 0.56%)</title><rect x="17.9149%" y="213" width="0.5617%" height="15" fill="rgb(242,216,29)" fg:x="3923" fg:w="123"/><text x="18.1649%" y="223.50"></text></g><g><title>osmium`core::slice::cmp::impl$5::equal (102 samples, 0.47%)</title><rect x="18.0108%" y="197" width="0.4658%" height="15" fill="rgb(230,116,27)" fg:x="3944" fg:w="102"/><text x="18.2608%" y="207.50"></text></g><g><title>osmium`core::slice::index::impl$4::get (224 samples, 1.02%)</title><rect x="18.4766%" y="213" width="1.0229%" height="15" fill="rgb(228,99,48)" fg:x="4046" fg:w="224"/><text x="18.7266%" y="223.50"></text></g><g><title>osmium`core::slice::index::impl$4::get_unchecked (113 samples, 0.52%)</title><rect x="18.9835%" y="197" width="0.5160%" height="15" fill="rgb(253,11,6)" fg:x="4157" fg:w="113"/><text x="19.2335%" y="207.50"></text></g><g><title>osmium`core::slice::index::impl$4::index (120 samples, 0.55%)</title><rect x="19.4995%" y="213" width="0.5480%" height="15" fill="rgb(247,143,39)" fg:x="4270" fg:w="120"/><text x="19.7495%" y="223.50"></text></g><g><title>osmium`core::slice::index::impl$4::get_unchecked (81 samples, 0.37%)</title><rect x="19.6776%" y="197" width="0.3699%" height="15" fill="rgb(236,97,10)" fg:x="4309" fg:w="81"/><text x="19.9276%" y="207.50"></text></g><g><title>osmium`core::str::pattern::impl$1::next_match_back (945 samples, 4.32%)</title><rect x="16.3714%" y="229" width="4.3155%" height="15" fill="rgb(233,208,19)" fg:x="3585" fg:w="945"/><text x="16.6214%" y="239.50">osmiu..</text></g><g><title>osmium`core::slice::memchr::memrchr (140 samples, 0.64%)</title><rect x="20.0475%" y="213" width="0.6393%" height="15" fill="rgb(216,164,2)" fg:x="4390" fg:w="140"/><text x="20.2975%" y="223.50"></text></g><g><title>VCRUNTIME140`memset (9 samples, 0.04%)</title><rect x="21.1115%" y="213" width="0.0411%" height="15" fill="rgb(220,129,5)" fg:x="4623" fg:w="9"/><text x="21.3615%" y="223.50"></text></g><g><title>osmium`core::char::methods::len_utf8 (15 samples, 0.07%)</title><rect x="21.5864%" y="197" width="0.0685%" height="15" fill="rgb(242,17,10)" fg:x="4727" fg:w="15"/><text x="21.8364%" y="207.50"></text></g><g><title>osmium`core::char::methods::encode_utf8_raw (220 samples, 1.00%)</title><rect x="21.1526%" y="213" width="1.0047%" height="15" fill="rgb(242,107,0)" fg:x="4632" fg:w="220"/><text x="21.4026%" y="223.50"></text></g><g><title>osmium`core::slice::index::impl$4::index_mut (110 samples, 0.50%)</title><rect x="21.6549%" y="197" width="0.5023%" height="15" fill="rgb(251,28,31)" fg:x="4742" fg:w="110"/><text x="21.9049%" y="207.50"></text></g><g><title>osmium`core::slice::index::impl$4::get_unchecked_mut (81 samples, 0.37%)</title><rect x="21.7874%" y="181" width="0.3699%" height="15" fill="rgb(233,223,10)" fg:x="4771" fg:w="81"/><text x="22.0374%" y="191.50"></text></g><g><title>osmium`core::str::pattern::impl$3::into_searcher (326 samples, 1.49%)</title><rect x="20.6868%" y="229" width="1.4887%" height="15" fill="rgb(215,21,27)" fg:x="4530" fg:w="326"/><text x="20.9368%" y="239.50"></text></g><g><title>osmium`memset (4 samples, 0.02%)</title><rect x="22.1573%" y="213" width="0.0183%" height="15" fill="rgb(232,23,21)" fg:x="4852" fg:w="4"/><text x="22.4073%" y="223.50"></text></g><g><title>osmium`core::str::impl$0::rfind (1,383 samples, 6.32%)</title><rect x="16.1750%" y="245" width="6.3156%" height="15" fill="rgb(244,5,23)" fg:x="3542" fg:w="1383"/><text x="16.4250%" y="255.50">osmium`c..</text></g><g><title>osmium`enum2$&lt;core::option::Option&lt;tuple$&lt;usize,usize&gt; &gt; &gt;::map&lt;tuple$&lt;usize,usize&gt;,usize,core::str::impl$0::rfind::closure_env$0 (69 samples, 0.32%)</title><rect x="22.1755%" y="229" width="0.3151%" height="15" fill="rgb(226,81,46)" fg:x="4856" fg:w="69"/><text x="22.4255%" y="239.50"></text></g><g><title>osmium`core::str::impl$0::rfind::closure$0 (3 samples, 0.01%)</title><rect x="22.4769%" y="213" width="0.0137%" height="15" fill="rgb(247,70,30)" fg:x="4922" fg:w="3"/><text x="22.7269%" y="223.50"></text></g><g><title>osmium`core::ptr::const_ptr::impl$0::sub_ptr (141 samples, 0.64%)</title><rect x="24.2808%" y="165" width="0.6439%" height="15" fill="rgb(212,68,19)" fg:x="5317" fg:w="141"/><text x="24.5308%" y="175.50"></text></g><g><title>osmium`core::ptr::const_ptr::impl$0::sub_ptr (180 samples, 0.82%)</title><rect x="25.5320%" y="149" width="0.8220%" height="15" fill="rgb(240,187,13)" fg:x="5591" fg:w="180"/><text x="25.7820%" y="159.50"></text></g><g><title>osmium`core::str::validations::next_code_point&lt;core::slice::iter::Iter (271 samples, 1.24%)</title><rect x="26.3540%" y="149" width="1.2376%" height="15" fill="rgb(223,113,26)" fg:x="5771" fg:w="271"/><text x="26.6040%" y="159.50"></text></g><g><title>osmium`core::slice::iter::impl$181::next (159 samples, 0.73%)</title><rect x="26.8655%" y="133" width="0.7261%" height="15" fill="rgb(206,192,2)" fg:x="5883" fg:w="159"/><text x="27.1155%" y="143.50"></text></g><g><title>osmium`core::str::iter::impl$5::next (670 samples, 3.06%)</title><rect x="24.9247%" y="165" width="3.0596%" height="15" fill="rgb(241,108,4)" fg:x="5458" fg:w="670"/><text x="25.1747%" y="175.50">osm..</text></g><g><title>osmium`enum2$&lt;core::option::Option&lt;u32&gt; &gt;::map (86 samples, 0.39%)</title><rect x="27.5916%" y="149" width="0.3927%" height="15" fill="rgb(247,173,49)" fg:x="6042" fg:w="86"/><text x="27.8416%" y="159.50"></text></g><g><title>osmium`core::str::iter::impl$0::next::closure$0 (35 samples, 0.16%)</title><rect x="27.8245%" y="133" width="0.1598%" height="15" fill="rgb(224,114,35)" fg:x="6093" fg:w="35"/><text x="28.0745%" y="143.50"></text></g><g><title>osmium`core::str::pattern::impl$23::next_reject (1,172 samples, 5.35%)</title><rect x="23.2715%" y="213" width="5.3521%" height="15" fill="rgb(245,159,27)" fg:x="5096" fg:w="1172"/><text x="23.5215%" y="223.50">osmium`..</text></g><g><title>osmium`core::str::pattern::Searcher::next_reject&lt;core::str::pattern::MultiCharEqSearcher (1,168 samples, 5.33%)</title><rect x="23.2898%" y="197" width="5.3338%" height="15" fill="rgb(245,172,44)" fg:x="5100" fg:w="1168"/><text x="23.5398%" y="207.50">osmium`..</text></g><g><title>osmium`core::str::pattern::impl$9::next (1,104 samples, 5.04%)</title><rect x="23.5821%" y="181" width="5.0416%" height="15" fill="rgb(236,23,11)" fg:x="5164" fg:w="1104"/><text x="23.8321%" y="191.50">osmium..</text></g><g><title>osmium`core::str::pattern::impl$4::matches (140 samples, 0.64%)</title><rect x="27.9843%" y="165" width="0.6393%" height="15" fill="rgb(205,117,38)" fg:x="6128" fg:w="140"/><text x="28.2343%" y="175.50"></text></g><g><title>osmium`core::str::impl$0::trim_start::closure$0 (99 samples, 0.45%)</title><rect x="28.1715%" y="149" width="0.4521%" height="15" fill="rgb(237,72,25)" fg:x="6169" fg:w="99"/><text x="28.4215%" y="159.50"></text></g><g><title>osmium`core::char::methods::impl$0::is_whitespace (68 samples, 0.31%)</title><rect x="28.3131%" y="133" width="0.3105%" height="15" fill="rgb(244,70,9)" fg:x="6200" fg:w="68"/><text x="28.5631%" y="143.50"></text></g><g><title>VCRUNTIME140`memcpy (113 samples, 0.52%)</title><rect x="28.6602%" y="197" width="0.5160%" height="15" fill="rgb(217,125,39)" fg:x="6276" fg:w="113"/><text x="28.9102%" y="207.50"></text></g><g><title>osmium`core::str::pattern::impl$26::into_searcher (365 samples, 1.67%)</title><rect x="28.6236%" y="213" width="1.6668%" height="15" fill="rgb(235,36,10)" fg:x="6268" fg:w="365"/><text x="28.8736%" y="223.50"></text></g><g><title>osmium`core::str::pattern::impl$8::into_searcher (244 samples, 1.11%)</title><rect x="29.1762%" y="197" width="1.1143%" height="15" fill="rgb(251,123,47)" fg:x="6389" fg:w="244"/><text x="29.4262%" y="207.50"></text></g><g><title>osmium`core::slice::iter::Iter&lt;u8&gt;::new (61 samples, 0.28%)</title><rect x="30.0119%" y="181" width="0.2786%" height="15" fill="rgb(221,13,13)" fg:x="6572" fg:w="61"/><text x="30.2619%" y="191.50"></text></g><g><title>osmium`core::str::impl$0::trim_start (1,751 samples, 8.00%)</title><rect x="22.4906%" y="245" width="7.9962%" height="15" fill="rgb(238,131,9)" fg:x="4925" fg:w="1751"/><text x="22.7406%" y="255.50">osmium`core..</text></g><g><title>osmium`core::str::impl$0::trim_start_matches (1,749 samples, 7.99%)</title><rect x="22.4998%" y="229" width="7.9870%" height="15" fill="rgb(211,50,8)" fg:x="4927" fg:w="1749"/><text x="22.7498%" y="239.50">osmium`core..</text></g><g><title>osmium`core::str::traits::impl$7::get_unchecked (43 samples, 0.20%)</title><rect x="30.2904%" y="213" width="0.1964%" height="15" fill="rgb(245,182,24)" fg:x="6633" fg:w="43"/><text x="30.5404%" y="223.50"></text></g><g><title>osmium`core::str::impl$0::is_char_boundary (428 samples, 1.95%)</title><rect x="31.9618%" y="197" width="1.9545%" height="15" fill="rgb(242,14,37)" fg:x="6999" fg:w="428"/><text x="32.2118%" y="207.50">o..</text></g><g><title>osmium`core::slice::index::impl$2::get (186 samples, 0.85%)</title><rect x="33.0669%" y="181" width="0.8494%" height="15" fill="rgb(246,228,12)" fg:x="7241" fg:w="186"/><text x="33.3169%" y="191.50"></text></g><g><title>osmium`core::str::traits::impl$4::index&lt;core::ops::range::Range (833 samples, 3.80%)</title><rect x="30.4868%" y="245" width="3.8040%" height="15" fill="rgb(213,55,15)" fg:x="6676" fg:w="833"/><text x="30.7368%" y="255.50">osmi..</text></g><g><title>osmium`core::str::traits::impl$7::index (800 samples, 3.65%)</title><rect x="30.6375%" y="229" width="3.6533%" height="15" fill="rgb(209,9,3)" fg:x="6709" fg:w="800"/><text x="30.8875%" y="239.50">osmi..</text></g><g><title>osmium`core::str::traits::impl$7::get (730 samples, 3.33%)</title><rect x="30.9572%" y="213" width="3.3336%" height="15" fill="rgb(230,59,30)" fg:x="6779" fg:w="730"/><text x="31.2072%" y="223.50">osm..</text></g><g><title>osmium`core::str::traits::impl$7::get_unchecked (82 samples, 0.37%)</title><rect x="33.9163%" y="197" width="0.3745%" height="15" fill="rgb(209,121,21)" fg:x="7427" fg:w="82"/><text x="34.1663%" y="207.50"></text></g><g><title>osmium`core::str::impl$0::is_char_boundary (473 samples, 2.16%)</title><rect x="35.7339%" y="197" width="2.1600%" height="15" fill="rgb(220,109,13)" fg:x="7825" fg:w="473"/><text x="35.9839%" y="207.50">o..</text></g><g><title>osmium`core::slice::index::impl$2::get (187 samples, 0.85%)</title><rect x="37.0399%" y="181" width="0.8540%" height="15" fill="rgb(232,18,1)" fg:x="8111" fg:w="187"/><text x="37.2899%" y="191.50"></text></g><g><title>osmium`core::str::traits::impl$4::index&lt;core::ops::range::RangeFrom (945 samples, 4.32%)</title><rect x="34.2908%" y="245" width="4.3155%" height="15" fill="rgb(215,41,42)" fg:x="7509" fg:w="945"/><text x="34.5408%" y="255.50">osmiu..</text></g><g><title>osmium`core::str::traits::impl$9::index (873 samples, 3.99%)</title><rect x="34.6196%" y="229" width="3.9867%" height="15" fill="rgb(224,123,36)" fg:x="7581" fg:w="873"/><text x="34.8696%" y="239.50">osmi..</text></g><g><title>osmium`core::str::traits::impl$9::get (727 samples, 3.32%)</title><rect x="35.2863%" y="213" width="3.3199%" height="15" fill="rgb(240,125,3)" fg:x="7727" fg:w="727"/><text x="35.5363%" y="223.50">osm..</text></g><g><title>osmium`core::str::traits::impl$9::get_unchecked (156 samples, 0.71%)</title><rect x="37.8939%" y="197" width="0.7124%" height="15" fill="rgb(205,98,50)" fg:x="8298" fg:w="156"/><text x="38.1439%" y="207.50"></text></g><g><title>osmium`core::str::traits::impl$4::index&lt;core::ops::range::RangeTo (501 samples, 2.29%)</title><rect x="38.6063%" y="245" width="2.2879%" height="15" fill="rgb(205,185,37)" fg:x="8454" fg:w="501"/><text x="38.8563%" y="255.50">o..</text></g><g><title>osmium`core::str::traits::impl$8::index (472 samples, 2.16%)</title><rect x="38.7387%" y="229" width="2.1554%" height="15" fill="rgb(238,207,15)" fg:x="8483" fg:w="472"/><text x="38.9887%" y="239.50">o..</text></g><g><title>osmium`core::str::traits::impl$8::get (427 samples, 1.95%)</title><rect x="38.9442%" y="213" width="1.9499%" height="15" fill="rgb(213,199,42)" fg:x="8528" fg:w="427"/><text x="39.1942%" y="223.50">o..</text></g><g><title>osmium`core::str::impl$0::is_char_boundary (311 samples, 1.42%)</title><rect x="39.4739%" y="197" width="1.4202%" height="15" fill="rgb(235,201,11)" fg:x="8644" fg:w="311"/><text x="39.7239%" y="207.50"></text></g><g><title>osmium`core::slice::index::impl$2::get (139 samples, 0.63%)</title><rect x="40.2594%" y="181" width="0.6348%" height="15" fill="rgb(207,46,11)" fg:x="8816" fg:w="139"/><text x="40.5094%" y="191.50"></text></g><g><title>osmium`enum2$&lt;core::option::Option&lt;ref$&lt;osmium::tokenizer::FileToken&gt; &gt; &gt;::unwrap&lt;ref$ (12 samples, 0.05%)</title><rect x="40.8941%" y="245" width="0.0548%" height="15" fill="rgb(241,35,35)" fg:x="8955" fg:w="12"/><text x="41.1441%" y="255.50"></text></g><g><title>osmium`enum2$&lt;core::option::Option&lt;usize&gt; &gt;::unwrap (5 samples, 0.02%)</title><rect x="40.9489%" y="245" width="0.0228%" height="15" fill="rgb(243,32,47)" fg:x="8967" fg:w="5"/><text x="41.1989%" y="255.50"></text></g><g><title>osmium`core::ptr::const_ptr::impl$0::sub_ptr (96 samples, 0.44%)</title><rect x="44.0314%" y="165" width="0.4384%" height="15" fill="rgb(247,202,23)" fg:x="9642" fg:w="96"/><text x="44.2814%" y="175.50"></text></g><g><title>osmium`core::str::validations::next_code_point_reverse&lt;core::slice::iter::Iter (215 samples, 0.98%)</title><rect x="44.5657%" y="149" width="0.9818%" height="15" fill="rgb(219,102,11)" fg:x="9759" fg:w="215"/><text x="44.8157%" y="159.50"></text></g><g><title>osmium`core::slice::iter::impl$182::next_back (149 samples, 0.68%)</title><rect x="44.8671%" y="133" width="0.6804%" height="15" fill="rgb(243,110,44)" fg:x="9825" fg:w="149"/><text x="45.1171%" y="143.50"></text></g><g><title>osmium`enum2$&lt;core::option::Option&lt;char&gt; &gt;::map&lt;char,tuple$ (158 samples, 0.72%)</title><rect x="45.5475%" y="149" width="0.7215%" height="15" fill="rgb(222,74,54)" fg:x="9974" fg:w="158"/><text x="45.7975%" y="159.50"></text></g><g><title>osmium`core::str::iter::impl$6::next_back::closure$0 (91 samples, 0.42%)</title><rect x="45.8535%" y="133" width="0.4156%" height="15" fill="rgb(216,99,12)" fg:x="10041" fg:w="91"/><text x="46.1035%" y="143.50"></text></g><g><title>osmium`core::ptr::const_ptr::impl$0::sub_ptr (62 samples, 0.28%)</title><rect x="45.9859%" y="117" width="0.2831%" height="15" fill="rgb(226,22,26)" fg:x="10070" fg:w="62"/><text x="46.2359%" y="127.50"></text></g><g><title>osmium`core::str::iter::impl$6::next_back (447 samples, 2.04%)</title><rect x="44.4698%" y="165" width="2.0413%" height="15" fill="rgb(217,163,10)" fg:x="9738" fg:w="447"/><text x="44.7198%" y="175.50">o..</text></g><g><title>osmium`enum2$&lt;core::option::Option&lt;u32&gt; &gt;::map (53 samples, 0.24%)</title><rect x="46.2691%" y="149" width="0.2420%" height="15" fill="rgb(213,25,53)" fg:x="10132" fg:w="53"/><text x="46.5191%" y="159.50"></text></g><g><title>osmium`core::str::iter::impl$2::next_back::closure$0 (16 samples, 0.07%)</title><rect x="46.4380%" y="133" width="0.0731%" height="15" fill="rgb(252,105,26)" fg:x="10169" fg:w="16"/><text x="46.6880%" y="143.50"></text></g><g><title>osmium`core::slice::iter::Iter&lt;char&gt;::new (131 samples, 0.60%)</title><rect x="46.6801%" y="149" width="0.5982%" height="15" fill="rgb(220,39,43)" fg:x="10222" fg:w="131"/><text x="46.9301%" y="159.50"></text></g><g><title>osmium`core::slice::iter::impl$181::next (206 samples, 0.94%)</title><rect x="49.3881%" y="133" width="0.9407%" height="15" fill="rgb(229,68,48)" fg:x="10815" fg:w="206"/><text x="49.6381%" y="143.50"></text></g><g><title>osmium`core::str::pattern::impl$10::next_back&lt;array$ (1,622 samples, 7.41%)</title><rect x="43.5154%" y="181" width="7.4071%" height="15" fill="rgb(252,8,32)" fg:x="9529" fg:w="1622"/><text x="43.7654%" y="191.50">osmium`cor..</text></g><g><title>osmium`core::str::pattern::impl$5::matches (966 samples, 4.41%)</title><rect x="46.5111%" y="165" width="4.4114%" height="15" fill="rgb(223,20,43)" fg:x="10185" fg:w="966"/><text x="46.7611%" y="175.50">osmiu..</text></g><g><title>osmium`core::slice::iter::impl$181::any&lt;char,core::str::pattern::impl$5::matches::closure_env$0 (798 samples, 3.64%)</title><rect x="47.2783%" y="149" width="3.6442%" height="15" fill="rgb(229,81,49)" fg:x="10353" fg:w="798"/><text x="47.5283%" y="159.50">osmi..</text></g><g><title>osmium`core::str::pattern::impl$5::matches::closure$0 (130 samples, 0.59%)</title><rect x="50.3288%" y="133" width="0.5937%" height="15" fill="rgb(236,28,36)" fg:x="11021" fg:w="130"/><text x="50.5788%" y="143.50"></text></g><g><title>osmium`core::str::impl$0::ends_with&lt;array$ (2,258 samples, 10.31%)</title><rect x="42.5062%" y="229" width="10.3114%" height="15" fill="rgb(249,185,26)" fg:x="9308" fg:w="2258"/><text x="42.7562%" y="239.50">osmium`core::st..</text></g><g><title>osmium`core::str::pattern::impl$12::is_suffix_of (2,241 samples, 10.23%)</title><rect x="42.5838%" y="213" width="10.2338%" height="15" fill="rgb(249,174,33)" fg:x="9325" fg:w="2241"/><text x="42.8338%" y="223.50">osmium`core::st..</text></g><g><title>osmium`core::str::pattern::Pattern::is_suffix_of&lt;core::str::pattern::MultiCharEqPattern&lt;array$ (2,224 samples, 10.16%)</title><rect x="42.6614%" y="197" width="10.1562%" height="15" fill="rgb(233,201,37)" fg:x="9342" fg:w="2224"/><text x="42.9114%" y="207.50">osmium`core::st..</text></g><g><title>osmium`core::str::pattern::impl$8::into_searcher&lt;array$ (415 samples, 1.90%)</title><rect x="50.9225%" y="181" width="1.8952%" height="15" fill="rgb(221,78,26)" fg:x="11151" fg:w="415"/><text x="51.1725%" y="191.50">o..</text></g><g><title>osmium`core::slice::iter::Iter&lt;u8&gt;::new (95 samples, 0.43%)</title><rect x="52.3838%" y="165" width="0.4338%" height="15" fill="rgb(250,127,30)" fg:x="11471" fg:w="95"/><text x="52.6338%" y="175.50"></text></g><g><title>osmium`core::str::impl$0::is_empty (68 samples, 0.31%)</title><rect x="52.8176%" y="229" width="0.3105%" height="15" fill="rgb(230,49,44)" fg:x="11566" fg:w="68"/><text x="53.0676%" y="239.50"></text></g><g><title>osmium`core::str::impl$0::len (22 samples, 0.10%)</title><rect x="53.1281%" y="229" width="0.1005%" height="15" fill="rgb(229,67,23)" fg:x="11634" fg:w="22"/><text x="53.3781%" y="239.50"></text></g><g><title>osmium`core::str::impl$0::is_char_boundary (190 samples, 0.87%)</title><rect x="53.9364%" y="181" width="0.8677%" height="15" fill="rgb(249,83,47)" fg:x="11811" fg:w="190"/><text x="54.1864%" y="191.50"></text></g><g><title>osmium`core::slice::index::impl$2::get (56 samples, 0.26%)</title><rect x="54.5484%" y="165" width="0.2557%" height="15" fill="rgb(215,43,3)" fg:x="11945" fg:w="56"/><text x="54.7984%" y="175.50"></text></g><g><title>osmium`core::str::traits::impl$4::index&lt;core::ops::range::RangeFrom (423 samples, 1.93%)</title><rect x="53.2286%" y="229" width="1.9317%" height="15" fill="rgb(238,154,13)" fg:x="11656" fg:w="423"/><text x="53.4786%" y="239.50">o..</text></g><g><title>osmium`core::str::traits::impl$9::index (398 samples, 1.82%)</title><rect x="53.3428%" y="213" width="1.8175%" height="15" fill="rgb(219,56,2)" fg:x="11681" fg:w="398"/><text x="53.5928%" y="223.50">o..</text></g><g><title>osmium`core::str::traits::impl$9::get (327 samples, 1.49%)</title><rect x="53.6670%" y="197" width="1.4933%" height="15" fill="rgb(233,0,4)" fg:x="11752" fg:w="327"/><text x="53.9170%" y="207.50"></text></g><g><title>osmium`core::str::traits::impl$9::get_unchecked (78 samples, 0.36%)</title><rect x="54.8041%" y="181" width="0.3562%" height="15" fill="rgb(235,30,7)" fg:x="12001" fg:w="78"/><text x="55.0541%" y="191.50"></text></g><g><title>osmium`core::str::traits::impl$4::index&lt;core::ops::range::RangeTo (468 samples, 2.14%)</title><rect x="55.1603%" y="229" width="2.1372%" height="15" fill="rgb(250,79,13)" fg:x="12079" fg:w="468"/><text x="55.4103%" y="239.50">o..</text></g><g><title>osmium`core::str::traits::impl$8::index (436 samples, 1.99%)</title><rect x="55.3064%" y="213" width="1.9910%" height="15" fill="rgb(211,146,34)" fg:x="12111" fg:w="436"/><text x="55.5564%" y="223.50">o..</text></g><g><title>osmium`core::str::traits::impl$8::get (389 samples, 1.78%)</title><rect x="55.5211%" y="197" width="1.7764%" height="15" fill="rgb(228,22,38)" fg:x="12158" fg:w="389"/><text x="55.7711%" y="207.50">o..</text></g><g><title>osmium`core::str::impl$0::is_char_boundary (266 samples, 1.21%)</title><rect x="56.0827%" y="181" width="1.2147%" height="15" fill="rgb(235,168,5)" fg:x="12281" fg:w="266"/><text x="56.3327%" y="191.50"></text></g><g><title>osmium`core::slice::index::impl$2::get (93 samples, 0.42%)</title><rect x="56.8728%" y="165" width="0.4247%" height="15" fill="rgb(221,155,16)" fg:x="12454" fg:w="93"/><text x="57.1228%" y="175.50"></text></g><g><title>osmium`enum2$&lt;core::option::Option&lt;enum2$&lt;osmium::tokenizer::Token&gt; &gt; &gt;::is_some&lt;enum2$ (55 samples, 0.25%)</title><rect x="57.2975%" y="229" width="0.2512%" height="15" fill="rgb(215,215,53)" fg:x="12547" fg:w="55"/><text x="57.5475%" y="239.50"></text></g><g><title>VCRUNTIME140`memcmp (239 samples, 1.09%)</title><rect x="86.1449%" y="133" width="1.0914%" height="15" fill="rgb(223,4,10)" fg:x="18864" fg:w="239"/><text x="86.3949%" y="143.50"></text></g><g><title>osmium`core::slice::cmp::impl$0::eq (2,533 samples, 11.57%)</title><rect x="75.8243%" y="165" width="11.5673%" height="15" fill="rgb(234,103,6)" fg:x="16604" fg:w="2533"/><text x="76.0743%" y="175.50">osmium`core::slic..</text></g><g><title>osmium`core::slice::cmp::impl$5::equal (2,200 samples, 10.05%)</title><rect x="77.3450%" y="149" width="10.0466%" height="15" fill="rgb(227,97,0)" fg:x="16937" fg:w="2200"/><text x="77.5950%" y="159.50">osmium`core::sl..</text></g><g><title>osmium`memcmp (34 samples, 0.16%)</title><rect x="87.2363%" y="133" width="0.1553%" height="15" fill="rgb(234,150,53)" fg:x="19103" fg:w="34"/><text x="87.4863%" y="143.50"></text></g><g><title>osmium`core::slice::impl$0::starts_with (6,745 samples, 30.80%)</title><rect x="64.6360%" y="181" width="30.8019%" height="15" fill="rgb(228,201,54)" fg:x="14154" fg:w="6745"/><text x="64.8860%" y="191.50">osmium`core::slice::impl$0::starts_with</text></g><g><title>osmium`core::slice::index::impl$4::index (1,762 samples, 8.05%)</title><rect x="87.3915%" y="165" width="8.0464%" height="15" fill="rgb(222,22,37)" fg:x="19137" fg:w="1762"/><text x="87.6415%" y="175.50">osmium`core..</text></g><g><title>osmium`core::slice::index::impl$4::get_unchecked (1,171 samples, 5.35%)</title><rect x="90.0904%" y="149" width="5.3475%" height="15" fill="rgb(237,53,32)" fg:x="19728" fg:w="1171"/><text x="90.3404%" y="159.50">osmium`..</text></g><g><title>osmium`enum2$&lt;osmium::tokenizer::Token&gt;::try_get_keyword (8,369 samples, 38.22%)</title><rect x="57.5486%" y="229" width="38.2181%" height="15" fill="rgb(233,25,53)" fg:x="12602" fg:w="8369"/><text x="57.7986%" y="239.50">osmium`enum2$&lt;osmium::tokenizer::Token&gt;::try_get_keyword</text></g><g><title>osmium`core::str::impl$0::strip_prefix&lt;ref$ (7,940 samples, 36.26%)</title><rect x="59.5077%" y="213" width="36.2590%" height="15" fill="rgb(210,40,34)" fg:x="13031" fg:w="7940"/><text x="59.7577%" y="223.50">osmium`core::str::impl$0::strip_prefix&lt;ref$</text></g><g><title>osmium`core::str::pattern::impl$28::strip_prefix_of (7,654 samples, 34.95%)</title><rect x="60.8138%" y="197" width="34.9530%" height="15" fill="rgb(241,220,44)" fg:x="13317" fg:w="7654"/><text x="61.0638%" y="207.50">osmium`core::str::pattern::impl$28::strip_prefix_of</text></g><g><title>osmium`core::str::traits::impl$9::get_unchecked (72 samples, 0.33%)</title><rect x="95.4379%" y="181" width="0.3288%" height="15" fill="rgb(235,28,35)" fg:x="20899" fg:w="72"/><text x="95.6879%" y="191.50"></text></g><g><title>osmium`core::cmp::PartialEq::ne&lt;enum2$&lt;core::option::Option&lt;char&gt; &gt;,enum2$&lt;core::option::Option (9 samples, 0.04%)</title><rect x="96.2828%" y="213" width="0.0411%" height="15" fill="rgb(210,56,17)" fg:x="21084" fg:w="9"/><text x="96.5328%" y="223.50"></text></g><g><title>osmium`core::option::impl$14::eq (6 samples, 0.03%)</title><rect x="96.2965%" y="197" width="0.0274%" height="15" fill="rgb(224,130,29)" fg:x="21087" fg:w="6"/><text x="96.5465%" y="207.50"></text></g><g><title>osmium`core::option::impl$15::eq (4 samples, 0.02%)</title><rect x="96.3056%" y="181" width="0.0183%" height="15" fill="rgb(235,212,8)" fg:x="21089" fg:w="4"/><text x="96.5556%" y="191.50"></text></g><g><title>osmium`core::str::impl$0::char_indices (9 samples, 0.04%)</title><rect x="96.3239%" y="213" width="0.0411%" height="15" fill="rgb(223,33,50)" fg:x="21093" fg:w="9"/><text x="96.5739%" y="223.50"></text></g><g><title>osmium`core::slice::iter::Iter&lt;u8&gt;::new (4 samples, 0.02%)</title><rect x="96.3467%" y="197" width="0.0183%" height="15" fill="rgb(219,149,13)" fg:x="21098" fg:w="4"/><text x="96.5967%" y="207.50"></text></g><g><title>osmium`core::char::methods::encode_utf8_raw (65 samples, 0.30%)</title><rect x="96.5705%" y="181" width="0.2968%" height="15" fill="rgb(250,156,29)" fg:x="21147" fg:w="65"/><text x="96.8205%" y="191.50"></text></g><g><title>osmium`core::slice::index::impl$4::index_mut (33 samples, 0.15%)</title><rect x="96.7166%" y="165" width="0.1507%" height="15" fill="rgb(216,193,19)" fg:x="21179" fg:w="33"/><text x="96.9666%" y="175.50"></text></g><g><title>osmium`core::slice::index::impl$4::get_unchecked_mut (21 samples, 0.10%)</title><rect x="96.7714%" y="149" width="0.0959%" height="15" fill="rgb(216,135,14)" fg:x="21191" fg:w="21"/><text x="97.0214%" y="159.50"></text></g><g><title>osmium`core::slice::cmp::impl$0::eq (43 samples, 0.20%)</title><rect x="97.1048%" y="165" width="0.1964%" height="15" fill="rgb(241,47,5)" fg:x="21264" fg:w="43"/><text x="97.3548%" y="175.50"></text></g><g><title>osmium`core::slice::cmp::impl$5::equal (35 samples, 0.16%)</title><rect x="97.1413%" y="149" width="0.1598%" height="15" fill="rgb(233,42,35)" fg:x="21272" fg:w="35"/><text x="97.3913%" y="159.50"></text></g><g><title>VCRUNTIME140`memcmp (5 samples, 0.02%)</title><rect x="97.2783%" y="133" width="0.0228%" height="15" fill="rgb(231,13,6)" fg:x="21302" fg:w="5"/><text x="97.5283%" y="143.50"></text></g><g><title>osmium`core::str::impl$0::starts_with (226 samples, 1.03%)</title><rect x="96.3650%" y="213" width="1.0321%" height="15" fill="rgb(207,181,40)" fg:x="21102" fg:w="226"/><text x="96.6150%" y="223.50"></text></g><g><title>osmium`core::str::pattern::impl$3::is_prefix_of (218 samples, 1.00%)</title><rect x="96.4015%" y="197" width="0.9955%" height="15" fill="rgb(254,173,49)" fg:x="21110" fg:w="218"/><text x="96.6515%" y="207.50"></text></g><g><title>osmium`core::slice::impl$0::starts_with (116 samples, 0.53%)</title><rect x="96.8673%" y="181" width="0.5297%" height="15" fill="rgb(221,1,38)" fg:x="21212" fg:w="116"/><text x="97.1173%" y="191.50"></text></g><g><title>osmium`core::slice::index::impl$4::index (21 samples, 0.10%)</title><rect x="97.3011%" y="165" width="0.0959%" height="15" fill="rgb(206,124,46)" fg:x="21307" fg:w="21"/><text x="97.5511%" y="175.50"></text></g><g><title>osmium`core::slice::index::impl$4::get_unchecked (17 samples, 0.08%)</title><rect x="97.3194%" y="149" width="0.0776%" height="15" fill="rgb(249,21,11)" fg:x="21311" fg:w="17"/><text x="97.5694%" y="159.50"></text></g><g><title>osmium`core::ptr::const_ptr::impl$0::sub_ptr (98 samples, 0.45%)</title><rect x="97.6482%" y="197" width="0.4475%" height="15" fill="rgb(222,201,40)" fg:x="21383" fg:w="98"/><text x="97.8982%" y="207.50"></text></g><g><title>osmium`core::str::validations::next_code_point&lt;core::slice::iter::Iter (165 samples, 0.75%)</title><rect x="98.0957%" y="197" width="0.7535%" height="15" fill="rgb(235,61,29)" fg:x="21481" fg:w="165"/><text x="98.3457%" y="207.50"></text></g><g><title>osmium`core::slice::iter::impl$181::next (125 samples, 0.57%)</title><rect x="98.2784%" y="181" width="0.5708%" height="15" fill="rgb(219,207,3)" fg:x="21521" fg:w="125"/><text x="98.5284%" y="191.50"></text></g><g><title>osmium`core::str::iter::impl$5::next (373 samples, 1.70%)</title><rect x="97.3970%" y="213" width="1.7034%" height="15" fill="rgb(222,56,46)" fg:x="21328" fg:w="373"/><text x="97.6470%" y="223.50"></text></g><g><title>osmium`enum2$&lt;core::option::Option&lt;u32&gt; &gt;::map (55 samples, 0.25%)</title><rect x="98.8492%" y="197" width="0.2512%" height="15" fill="rgb(239,76,54)" fg:x="21646" fg:w="55"/><text x="99.0992%" y="207.50"></text></g><g><title>osmium`core::str::iter::impl$0::next::closure$0 (23 samples, 0.11%)</title><rect x="98.9953%" y="181" width="0.1050%" height="15" fill="rgb(231,124,27)" fg:x="21678" fg:w="23"/><text x="99.2453%" y="191.50"></text></g><g><title>osmium`core::str::impl$0::is_char_boundary (6 samples, 0.03%)</title><rect x="99.1278%" y="165" width="0.0274%" height="15" fill="rgb(249,195,6)" fg:x="21707" fg:w="6"/><text x="99.3778%" y="175.50"></text></g><g><title>osmium`core::slice::index::impl$2::get (3 samples, 0.01%)</title><rect x="99.1415%" y="149" width="0.0137%" height="15" fill="rgb(237,174,47)" fg:x="21710" fg:w="3"/><text x="99.3915%" y="159.50"></text></g><g><title>osmium`core::str::traits::impl$4::index&lt;core::ops::range::RangeFrom (16 samples, 0.07%)</title><rect x="99.1004%" y="213" width="0.0731%" height="15" fill="rgb(206,201,31)" fg:x="21701" fg:w="16"/><text x="99.3504%" y="223.50"></text></g><g><title>osmium`core::str::traits::impl$9::index (16 samples, 0.07%)</title><rect x="99.1004%" y="197" width="0.0731%" height="15" fill="rgb(231,57,52)" fg:x="21701" fg:w="16"/><text x="99.3504%" y="207.50"></text></g><g><title>osmium`core::str::traits::impl$9::get (10 samples, 0.05%)</title><rect x="99.1278%" y="181" width="0.0457%" height="15" fill="rgb(248,177,22)" fg:x="21707" fg:w="10"/><text x="99.3778%" y="191.50"></text></g><g><title>osmium`core::str::traits::impl$9::get_unchecked (4 samples, 0.02%)</title><rect x="99.1552%" y="165" width="0.0183%" height="15" fill="rgb(215,211,37)" fg:x="21713" fg:w="4"/><text x="99.4052%" y="175.50"></text></g><g><title>osmium`enum2$&lt;osmium::tokenizer::Token&gt;::find (12,756 samples, 58.25%)</title><rect x="40.9718%" y="245" width="58.2519%" height="15" fill="rgb(241,128,51)" fg:x="8972" fg:w="12756"/><text x="41.2218%" y="255.50">osmium`enum2$&lt;osmium::tokenizer::Token&gt;::find</text></g><g><title>osmium`enum2$&lt;osmium::tokenizer::Token&gt;::try_parse_string_literal (757 samples, 3.46%)</title><rect x="95.7667%" y="229" width="3.4569%" height="15" fill="rgb(227,165,31)" fg:x="20971" fg:w="757"/><text x="96.0167%" y="239.50">osm..</text></g><g><title>osmium`core::str::traits::impl$4::index&lt;core::ops::range::RangeTo (11 samples, 0.05%)</title><rect x="99.1734%" y="213" width="0.0502%" height="15" fill="rgb(228,167,24)" fg:x="21717" fg:w="11"/><text x="99.4234%" y="223.50"></text></g><g><title>osmium`core::str::traits::impl$8::index (8 samples, 0.04%)</title><rect x="99.1871%" y="197" width="0.0365%" height="15" fill="rgb(228,143,12)" fg:x="21720" fg:w="8"/><text x="99.4371%" y="207.50"></text></g><g><title>osmium`core::str::traits::impl$8::get (7 samples, 0.03%)</title><rect x="99.1917%" y="181" width="0.0320%" height="15" fill="rgb(249,149,8)" fg:x="21721" fg:w="7"/><text x="99.4417%" y="191.50"></text></g><g><title>osmium`core::str::impl$0::is_char_boundary (6 samples, 0.03%)</title><rect x="99.1963%" y="165" width="0.0274%" height="15" fill="rgb(243,35,44)" fg:x="21722" fg:w="6"/><text x="99.4463%" y="175.50"></text></g><g><title>osmium`core::slice::index::impl$2::get (3 samples, 0.01%)</title><rect x="99.2100%" y="149" width="0.0137%" height="15" fill="rgb(246,89,9)" fg:x="21725" fg:w="3"/><text x="99.4600%" y="159.50"></text></g><g><title>osmium`enum2$&lt;osmium::tokenizer::Token&gt;::parse (21,843 samples, 99.75%)</title><rect x="0.1187%" y="261" width="99.7488%" height="15" fill="rgb(233,213,13)" fg:x="26" fg:w="21843"/><text x="0.3687%" y="271.50">osmium`enum2$&lt;osmium::tokenizer::Token&gt;::parse</text></g><g><title>osmium`enum2$&lt;osmium::tokenizer::Token&gt;::size (141 samples, 0.64%)</title><rect x="99.2237%" y="245" width="0.6439%" height="15" fill="rgb(233,141,41)" fg:x="21728" fg:w="141"/><text x="99.4737%" y="255.50"></text></g><g><title>osmium`core::str::impl$0::len (3 samples, 0.01%)</title><rect x="99.8539%" y="229" width="0.0137%" height="15" fill="rgb(239,167,4)" fg:x="21866" fg:w="3"/><text x="100.1039%" y="239.50"></text></g><g><title>osmium`core::str::converts::from_utf8 (10 samples, 0.05%)</title><rect x="99.8721%" y="229" width="0.0457%" height="15" fill="rgb(209,217,16)" fg:x="21870" fg:w="10"/><text x="100.1221%" y="239.50"></text></g><g><title>osmium`main (21,864 samples, 99.84%)</title><rect x="0.1096%" y="373" width="99.8447%" height="15" fill="rgb(219,88,35)" fg:x="24" fg:w="21864"/><text x="0.3596%" y="383.50">osmium`main</text></g><g><title>osmium`std::rt::lang_start&lt;tuple$ (21,864 samples, 99.84%)</title><rect x="0.1096%" y="357" width="99.8447%" height="15" fill="rgb(220,193,23)" fg:x="24" fg:w="21864"/><text x="0.3596%" y="367.50">osmium`std::rt::lang_start&lt;tuple$</text></g><g><title>osmium`std::rt::lang_start_internal (21,864 samples, 99.84%)</title><rect x="0.1096%" y="341" width="99.8447%" height="15" fill="rgb(230,90,52)" fg:x="24" fg:w="21864"/><text x="0.3596%" y="351.50">osmium`std::rt::lang_start_internal</text></g><g><title>osmium`std::rt::lang_start::closure$0&lt;tuple$ (21,864 samples, 99.84%)</title><rect x="0.1096%" y="325" width="99.8447%" height="15" fill="rgb(252,106,19)" fg:x="24" fg:w="21864"/><text x="0.3596%" y="335.50">osmium`std::rt::lang_start::closure$0&lt;tuple$</text></g><g><title>osmium`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (21,864 samples, 99.84%)</title><rect x="0.1096%" y="309" width="99.8447%" height="15" fill="rgb(206,74,20)" fg:x="24" fg:w="21864"/><text x="0.3596%" y="319.50">osmium`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>osmium`core::ops::function::FnOnce::call_once&lt;void (*)(),tuple$ (21,864 samples, 99.84%)</title><rect x="0.1096%" y="293" width="99.8447%" height="15" fill="rgb(230,138,44)" fg:x="24" fg:w="21864"/><text x="0.3596%" y="303.50">osmium`core::ops::function::FnOnce::call_once&lt;void (*)(),tuple$</text></g><g><title>osmium`osmium::main (21,864 samples, 99.84%)</title><rect x="0.1096%" y="277" width="99.8447%" height="15" fill="rgb(235,182,43)" fg:x="24" fg:w="21864"/><text x="0.3596%" y="287.50">osmium`osmium::main</text></g><g><title>osmium`std::fs::impl$5::read_to_string (19 samples, 0.09%)</title><rect x="99.8676%" y="261" width="0.0868%" height="15" fill="rgb(242,16,51)" fg:x="21869" fg:w="19"/><text x="100.1176%" y="271.50"></text></g><g><title>osmium`std::io::default_read_to_string (18 samples, 0.08%)</title><rect x="99.8721%" y="245" width="0.0822%" height="15" fill="rgb(248,9,4)" fg:x="21870" fg:w="18"/><text x="100.1221%" y="255.50"></text></g><g><title>osmium`std::io::default_read_to_end (8 samples, 0.04%)</title><rect x="99.9178%" y="229" width="0.0365%" height="15" fill="rgb(210,31,22)" fg:x="21880" fg:w="8"/><text x="100.1678%" y="239.50"></text></g><g><title>osmium`std::sys::windows::handle::Handle::read_buf (7 samples, 0.03%)</title><rect x="99.9224%" y="213" width="0.0320%" height="15" fill="rgb(239,54,39)" fg:x="21881" fg:w="7"/><text x="100.1724%" y="223.50"></text></g><g><title>osmium`std::sys::windows::handle::Handle::synchronous_read (7 samples, 0.03%)</title><rect x="99.9224%" y="197" width="0.0320%" height="15" fill="rgb(230,99,41)" fg:x="21881" fg:w="7"/><text x="100.1724%" y="207.50"></text></g><g><title>ntdll`ZwReadFile (7 samples, 0.03%)</title><rect x="99.9224%" y="181" width="0.0320%" height="15" fill="rgb(253,106,12)" fg:x="21881" fg:w="7"/><text x="100.1724%" y="191.50"></text></g><g><title>ntdll`RtlGetActiveActivationContext (6 samples, 0.03%)</title><rect x="99.9589%" y="245" width="0.0274%" height="15" fill="rgb(213,46,41)" fg:x="21889" fg:w="6"/><text x="100.2089%" y="255.50"></text></g><g><title>ntdll`RtlGetActiveActivationContext (6 samples, 0.03%)</title><rect x="99.9589%" y="229" width="0.0274%" height="15" fill="rgb(215,133,35)" fg:x="21889" fg:w="6"/><text x="100.2089%" y="239.50"></text></g><g><title>ntdll`RtlHashUnicodeString (3 samples, 0.01%)</title><rect x="99.9726%" y="213" width="0.0137%" height="15" fill="rgb(213,28,5)" fg:x="21892" fg:w="3"/><text x="100.2226%" y="223.50"></text></g><g><title>ucrtbase`exit (9 samples, 0.04%)</title><rect x="99.9543%" y="373" width="0.0411%" height="15" fill="rgb(215,77,49)" fg:x="21888" fg:w="9"/><text x="100.2043%" y="383.50"></text></g><g><title>ucrtbase`exit (9 samples, 0.04%)</title><rect x="99.9543%" y="357" width="0.0411%" height="15" fill="rgb(248,100,22)" fg:x="21888" fg:w="9"/><text x="100.2043%" y="367.50"></text></g><g><title>ucrtbase`mbsicmp_l (8 samples, 0.04%)</title><rect x="99.9589%" y="341" width="0.0365%" height="15" fill="rgb(208,67,9)" fg:x="21889" fg:w="8"/><text x="100.2089%" y="351.50"></text></g><g><title>ucrtbase`o_iswascii (8 samples, 0.04%)</title><rect x="99.9589%" y="325" width="0.0365%" height="15" fill="rgb(219,133,21)" fg:x="21889" fg:w="8"/><text x="100.2089%" y="335.50"></text></g><g><title>KERNELBASE`LoadLibraryExW (8 samples, 0.04%)</title><rect x="99.9589%" y="309" width="0.0365%" height="15" fill="rgb(246,46,29)" fg:x="21889" fg:w="8"/><text x="100.2089%" y="319.50"></text></g><g><title>ntdll`LdrLoadDll (8 samples, 0.04%)</title><rect x="99.9589%" y="293" width="0.0365%" height="15" fill="rgb(246,185,52)" fg:x="21889" fg:w="8"/><text x="100.2089%" y="303.50"></text></g><g><title>ntdll`RtlDosSearchPath_Ustr (8 samples, 0.04%)</title><rect x="99.9589%" y="277" width="0.0365%" height="15" fill="rgb(252,136,11)" fg:x="21889" fg:w="8"/><text x="100.2089%" y="287.50"></text></g><g><title>ntdll`RtlLeaveCriticalSection (8 samples, 0.04%)</title><rect x="99.9589%" y="261" width="0.0365%" height="15" fill="rgb(219,138,53)" fg:x="21889" fg:w="8"/><text x="100.2089%" y="271.50"></text></g><g><title>all (21,898 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(211,51,23)" fg:x="0" fg:w="21898"/><text x="0.2500%" y="447.50"></text></g><g><title>ntdll`RtlUserThreadStart (21,878 samples, 99.91%)</title><rect x="0.0913%" y="421" width="99.9087%" height="15" fill="rgb(247,221,28)" fg:x="20" fg:w="21878"/><text x="0.3413%" y="431.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (21,878 samples, 99.91%)</title><rect x="0.0913%" y="405" width="99.9087%" height="15" fill="rgb(251,222,45)" fg:x="20" fg:w="21878"/><text x="0.3413%" y="415.50">KERNEL32`BaseThreadInitThunk</text></g><g><title>osmium`__scrt_common_main_seh (21,874 samples, 99.89%)</title><rect x="0.1096%" y="389" width="99.8904%" height="15" fill="rgb(217,162,53)" fg:x="24" fg:w="21874"/><text x="0.3596%" y="399.50">osmium`__scrt_common_main_seh</text></g></svg></svg>